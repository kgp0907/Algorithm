#include <string>
#include <vector>
#include <algorithm>
#include<iostream>

using namespace std;

int moveX[4] = { 1, -1, 0, 0 };
int moveY[4] = { 0, 0, 1, -1 };

int M, N, K;
int cnt;
int arr[101][101];
bool visited[101][101];
vector<int> res;


void dfs(int x, int y) {
    int nx, ny;
    cnt++;
    visited[x][y] = true;
    
    // 좌표밖으로 나가는것을 방지
    for (int i = 0; i < 4; i++) {
        nx = x + moveX[i];
        ny = y + moveY[i];

        if (nx >= 0 && nx < M && ny >= 0 && ny < N && !visited[nx][ny])
            dfs(nx, ny);
    }
}

int main(void) {
    cin >> M >> N >> K;

    for (int i = 0; i < K; i++) {
        int x1, x2, y1, y2 = 0;
        cin >> x1 >> y1 >> x2 >> y2;

    // 입력받은 좌표를 기준으로 직사각형 넓이 해당하는 지점들을 체크하기. 
        for (int j = y1; j < y2; j++) {
            for (int k = x1; k < x2; k++) {
                arr[j][k] = 1;
                visited[j][k] = true;
            }
        }
    }

    // 직사각형 밖의 흰사각형의 넓이를 구하기
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            if (arr[i][j] == 0 && visited[i][j] == false) {
                cnt = 0;
                dfs(i, j);
                res.push_back(cnt);
            }
        }
    }

    sort(res.begin(), res.end());

    int size = res.size();

    cout << size << "\n";
    for (int i = 0; i < size; i++)
        cout << res[i]<<" ";

    return 0;
}
