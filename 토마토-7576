//#define _CRT_SECURE_NO_WARNINGS
#include<cstdio>
#include<vector>
#include<algorithm>
#include<iostream>
#include<cstring>
#include<queue>
using namespace std;

int n, m;
//bool visit[1001][1001];
int cnt[1001][1001];
int arr[1001][1001];
int result = 0;
int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0 , -1 };
struct tomato {
	int y, x;
};
queue<tomato> q;
bool IsInside(int ny, int nx) {
	return (0 <= nx && 0 <= ny && nx < m&& ny < n);
}
void bfs(void) {
	while (!q.empty()) {
		// 큐의 현재 원소(익은 토마토(1))를 꺼내기
		int y = q.front().y;
		int x = q.front().x;
		q.pop();

		// 해당 위치의 주변을 확인
		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			// 지도를 벗어나지 않고, 익지않은 토마토(0)라면
			if (IsInside(ny, nx) == 1 && arr[ny][nx] == 0) {
				arr[ny][nx] = arr[y][x] + 1;
				q.push({ ny, nx });
			}
		}
	}
}

int main() {
    /* 토마토 농장(그래프)의 크기 입력 (가로/세로)*/
    scanf_s("%d %d", &m, &n);

    /* 그래프 정보 입력*/
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            scanf_s("%d", &arr[i][j]);
            if (arr[i][j] == 1) { // 익은토마토(1) -> 큐  두개의 1이 들어가면 첫번째 1이처리, 이후 큐에 값을 넣어도 두번째로 들어간 큐가 실행된다.
                q.push({ i, j });
            }
        }
    }

    /* 그래프를 BFS를 통해 탐색 */
    bfs();

    /* 날짜 계산 및 출력  */
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            // 익지않은 토마토(0)가 존재할 경우
            if (arr[i][j] == 0) {
                printf("-1\n");
                return 0;
            }
            // 토마토는 다 익었는데, 얼마만에 익었는지?
            if (result < arr[i][j]) {
                result = arr[i][j];
            }
        }
    }
    printf("%d\n", result - 1);
    return 0;
}
