#include <string>
#include <vector>
#include <algorithm>
#include<iostream>

using namespace std;

int dx[3][3] = { {0,0,1},{0,1,1,},{0,1,1} };
int dy[3][3] = { {1,0,1},{0,0,1,},{1,0,1} };

int n;
int arr[101][101];
bool map[101][101];
int state = 1;
int cnt = 0;
void dfs(int x, int y, int now) {

//목적지에 도착한 경우 
	if (x == -1 && y == -1) {
		cnt++;
		return;
	}
	
  
	for (int i = 0; i < 3; i++) {
		int nx = dx[now][i] + x;
		int ny = dy[now][i] + y;

// 맵밖으로 나가지 않게 방지.
		if (nx >= 0 && nx < n && ny >= 0 && ny < n) {
    
    //가로, 세로로 가는 경우
			if (i == 0 || i == 1) {
				if (arr[nx][ny] == 0)
					dfs(nx, ny, i);
			}
    // 대각선으로 가는 경우
			else if (i == 2) {
				if (arr[nx][ny] == 0 && arr[nx - 1][ny] == 0 && arr[nx][ny - 1] == 0)
					dfs(nx, ny, i);
			}
		}
	}

}

int main() {
	cin >> n;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> arr[i][j];
			if (arr[i][j] == 1)
				arr[i][j] = -1;
		}
	}
	dfs(0,1, 0);

	cout << cnt;
}
